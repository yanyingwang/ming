#lang racket/base

(provide 筛分* 出去* 右出去* 出去*/入 右出去*/入 段)
(require "racket/base.rkt" "racket/list.rkt")

(名 (筛分* 例程A 某链)
    (复值参与 (入 () (筛分 例程A 某链))
              链))

(名 (出去* 某链 数A)
    (复值参与 (入 () (出去 某链 数A))
              链))
(名 (右出去* 某链 数A)
    (复值参与 (入 () (右出去 某链 数A))
              链))

(名 (出去*/入 某链 数A)
    (复值参与 (入 () (出去/入 某链 数A))
              链))


(名 (右出去*/入 某链 数A)
    (复值参与 (入 () (右出去/入 某链 数A))
              链))

(名 (段 LIST0 N1 N2)
    (若非 (精确非负整数? N1)
          (报参错 '段 "精确非负整数?" 1 LIST0 N1))
    (若非 (精确非负整数? N2)
          (报参错 '段 "精确非负整数?" 2 LIST0 N2))
    (令 演 ([某链 LIST0] [序数 0] [数A N1] [数B N2])
        (当 [(= 序数 数B) '()]
            [(< 序数 数A)
             (演 (阴 某链) (加一 序数) 数A 数B)]
            [(且 (>= 序数 数A) (< 序数 数B))
             (双 (阳 某链) (演 (阴 某链) (加一 序数) 数A 数B))])))
