#lang s-exp "../../../private/mapping-lang.rkt"


>>> values 􏸼 "並值（值古通直，𰅰是直的二简化字，因直为常用字，故采用𰅰在此为值的意思；並古为竝或𠀤，是並列的意思，比如並蒂莲一词；而并古是合并归一的意思））" ;;  値 􏾴 􏾴 𡖻 􏸼 􏸼
>>> call-with-values 入􏸼参予 "用continuation生成复值，并作为参数给予某例程"

>>> lambda 入 ;; 入 道
>>> define 名 "定义，命名" ;;   ;; 旨 意 义
>>> define-values 􏸾 "定义复值(􏸼)" ;复名 並名 􏸼 􏹀

>>> let 令 ;; 凭
>>> let-values 􏸽 ; 􏾴 复令 􏸿􏸿

>>> require ?受? "接受，引入" ;; 召 召见 , 引入的意思       入 出 拿 给 引进 输出 j举,承 受
>>> provide ?授? "授于，提供" ;; 宣 对外宣布的意思   把....供起来   奏 奉(侍奉,奉献,供奉) 贡 献 供 授


;;;;;; conditaionals
;; 如 若 倘 况
>>> if 若 "若是"
>>> case 尚 "倘如" ;尚（且） 倘 肖 光
>>> cond 当 "在……时候，当某某某某情况下则某某某某"
>>> else 俖 "否则，不然，都不是的情况" ;外 ;;否则 㚈 􏸴 􏸲

>>> when 若是
>>> unless 若非

>>> and 并 ;; 也 还 又 且 兼 而 并（且）
>>> or 或 ;; 不 而（且）

>>> not 非 ;否，是则返回#t (是 'a) => #t (是 1) => #t; (否 'a) => #f (否 1) => #f


