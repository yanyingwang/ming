#lang s-exp "../../../private/mapping-lang.rkt"


>>> cons 双 ;; 组合， 对:把两个东西双在一块,配对在一块.     接 合 连 构 结 创 造
>>> pair? 双? ;; 对子? 双

>>> car 阳
>>> cdr 阴

>>> null? 空?
>>> null 空

>>> list 链 "将数据依次排列组成链。" ;; 链子
>>> list* 链- "将数据依次排列组成链，链结尾无空。"
>>> list? 链?
>>> build-list 序链 "链内元素是按照一定次序排列的链即为序链。"


>>> list-ref 第 "返回链的第N个元素（从0起），即以链中的序号为参数来索引出相应的元素。" ;; 链之 链及 予 序
>>> length 长 "返回链的长度"

;; (list-tail 舍 "原链舍弃掉前面n个后的链。") ;; 去

>>> append 连 "把很多链连成一个链" ;; 串 接
>>> reverse 逆 "反向排序。" ;; 颠 倒

>>> map 各 "把某一例程依次映用到各个元素上，各个元素作为其参数。" ;; 各 依次应 映
>>> andmap 各都为 "链中各个元素全都是...的吗？" ;; 各有应 各都 映且
>>> ormap 各中有 "链中各个元素中有是...的吗？" ;; 各无应 各有 映或

>>> for-each 巡 "酒席上给全座依次斟酒一遍称为巡杯（酒过三巡），这里意思是链内元素依次执行某一个例程。" ; 轮着 每 轮 依次 遍自 遍执 行 循序

>>> foldl 各左拢
>>> foldr 各右拢

>>> remove 消 (elem "以" (racket 同) "作为比较来消去某值在链中的全部存在。") ;; 移除
>>> remq 消/等 (elem "以" (racket 等) "作为比较来消去某值在链中的全部存在。")
>>> remv 消/齐 (elem "以" (racket 齐) "作为比较来消去某值在链中的全部存在。")
;; remw 移除/总同
>>> remove* 消*/以链 (elem "以" (racket 同) "作为比较来消去某值在链中的全部存在。")
>>> remq* 消*/等/以链
>>> remv* 消*/齐/以链
;; (remw* 移除*/总同)

>>> sort 理 "整理、排序的意思"

>>> member 索 (elem "以" (racket 同) "作为比较来查询某值，返回链中某值和其之后的数据组成的新链")  ;; 后链
;; (memw 后员/总同)
>>> memv 索/齐 ;; 索
>>> memq 索/等 ;;
>>> memf 索/入 ;;

>>> filter 筛选 (elem "筛选出符合条件的链中元素并组成新链返回。另见：" (racket 筛分) (racket 筛除))  ;; 滤 筛选 挑选
>>> findf 筛甲 "筛选出第一个符合条件的链中元素并返回之。"  ;; 查 找  选  查 寻 找 查 索

>>> assoc 探 (elem "以" (racket 同) "作为比较来查找出联链中阳位是某值的元素链。")
;; (assw 找联/总同)
>>> assq 探/等
>>> assv 探/齐
>>> assf 探/入

>>> caar 阳之阳
>>> cdar 阳之阴
>>> cadr 阴之阳
>>> cddr 阴之阴
>>> caaar 阳之阳阳
>>> cdaar 阳之阳阴
>>> cadar 阳之阴阳
>>> caadr 阳之阴阴
>>> caddr 阴之阴阴
>>> caddr 阴之阴阳
>>> cdadr 阴之阳阴
>>> caadr 阴之阳阳
>>> caaaar 阳之阳阳阳
>>> caaadr 阴之阳阳阳
>>> caadar 阳之阴阳阳
>>> caaddr 阴之阴阳阳
>>> cadaar 阳之阳阴阳
>>> cadadr 阴之阳阴阳
>>> caddar 阳之阴阴阳
>>> cadddr 阴之阴阴阳
>>> cdaaar 阳之阳阳阴
>>> cdaadr 阴之阳阳阴
>>> cdadar 阳之阴阳阴
>>> cdaddr 阴之阴阳阴
>>> cddaar 阳之阳阴阴
>>> cddadr 阴之阳阴阴
>>> cdddar 阳之阴阴阴
>>> cddddr 阴之阴阴阴
