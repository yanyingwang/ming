#lang scribble/manual

@(require (for-label racket/base)
           scribble/eval
           scribble-rainbow-delimiters
           )

@(define the-eval
         (make-eval-factory '(ming)))

@script/rainbow-delimiters*

@title{名语言/Ming-Lang}
@author[(author+email "Yanying Wang" "yanyingwang1@gmail.com")]

@defmodule[ming/base]
名语言，LISP的中文化方言，Racket的中文化编程语言。


@section[#:tag "序一"]{序一：为什么}
相较于现今主流的编程语言而言，LISP的语法是极其简单，仅有括号构成。

LISP代码，一部分而言，被其语法既是括号（）所约定；另一部分的为其所处在的括号中的位置而确定，而这种位置，都由括号中处在第一个位置的字词（关键字）所阐述的。

这样说来，由LISP编程语言所写出的代码，因为语法的极其简单，其含义基本上完全是其宿主语言的自由发挥。如何命名一个LISP语言的关键字，很大程度上的决定着这个编程语言的可读性（代码有多容易被理解的），因为括号内的一切意义，没有多余的语法限制，几乎都只能由处在第一位的关键字推测。

当下主流编程语言的做法是扩展语法，引入更多语法规则，以便增加可读性。而对于LISP语言来说，如果替换关键字所使用的英语成汉语，某种意义上也能扩展可读性，因为汉语被认为是较英语而言更加复杂的语言，可以用更短的空间表达更多的意义。

汉语在语法上更加自由，在语素的颗粒度上更加精细，在书写表达上更有上千年的实践和文化积淀，另更有近代吸收西方文化后的白话文改革和拼音标点符号的引入，其上所述种种，更赖使用人口之众，都让我认为，将LISP的语法寄宿在汉语下所产生的编程语言，会成为人机交互的典范，将汉语的强大表达力融入在括号中......

@section[#:tag "序二"]{序二：如何做}
@itemlist[
@item{Racket语言自称是编程语言设计和实现的平台，可先用它设计一个方言，并逐步汉化翻译已实现了的内部定义。}
@item{在如上的过程中，逐步建立自动化代码翻译工具，以便让更多人更容易的投入到翻译中。}
@item{翻译需要实事求是，不求完全文言文化，也不求完全白话，甚至不求完全汉化（拼音和标点的意义不容忽视），唯一目的是探索和发挥古今汉语的优势所在。}
@item{循环往复，另可在翻译中引入切合汉语的有意义的新特性。}
]




@examples[#:eval (the-eval)
(require ming/base)

(名 三年一班点名册
    (链 "王小明" "李小花" "赵小红"))
(若 (相等? "王小明" (首 三年一班点名册))
    (陈 "三年一班点名册上的第一个姓名是王小明。")
    (陈 "三年一班点名册上的第一个姓名不是王小明。"))

(倘 (余之首 三年一班点名册)
    [("王小明" "王小白") (行陈 "三年一班点名册上的第二个姓名是王小明或王小白。")]
    [("赵小红" "赵大红" "赵红") (行陈 "三年一班点名册上的第二个姓名是赵小红、赵大红或赵红。")]
    [else (行陈 "三年一班点名册上的第二个姓名是什么暂未可知。")])

(require ming/list)
(当 [(相等? "王小明" (甲 三年一班点名册))
     (陈 "三年一班点名册上的第一个姓名是王小明。")]
    [(相等? "赵小红" (甲 三年一班点名册))
     (陈 "三年一班点名册上的第一个姓名是赵小红。")]
    [(相等? "赵小红" (乙 三年一班点名册))
     (陈 "三年一班点名册上的第二个姓名是赵小红。")])

]


以中国古代春秋战国时期，名家提出的辩题@hyperlink["https://zh.wikipedia.org/wiki/%E7%99%BD%E9%A9%AC%E9%9D%9E%E9%A9%AC" "“白马非马”"]，代码可以演示为：
@examples[#:eval (the-eval)
(require ming/base)

(名 马 (链 "白马" "黑马" "黄马"))
(名 白马 "白马")
(若 (相等? 马 白马)
    (陈 (化 "~v是~v" 白马 马))
    (陈 (化 "~v非~v" 白马 马)))
]